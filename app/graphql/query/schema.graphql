type Query {
  # User
  usersAdmin(option: Option!, condition: Condition): [User]
  userAdmin(id: ID!): User
  #userLogin(userLoginPayload: UserLoginPayload!): User!
  userRich(id: ID!): User!
  userLogin(userInput: UserInput!): result
  latestClassificationUser(category: String , option: Option):[User]


  # userByToken(clientType: String!, accessToken: String!): User!

  circles(option: Option!, condition: Condition): [Circle!]
  circle(id: ID!): Circle!

  latestCourse(option: Option!): [Course]
  latestMainCourse(option: Option!): [MainCourse]
  latestDirectCourse(mode : String!,  authorId: String, option: Option!): [MainCourse]
  latestInformation(option: Option!): [Information]
  latestGeekInformation(option: Option!): [Information]
  detailMainCourse(courseId: String!): MainCourse

  #speech
  speechGoogle(speechRequest: SpeechRequest): speechResult

  #latestComment
  latestComment(entityId: String!, category: String, option :Option!): [Comment]
  comment(id: ID!): Comment
  comments(option: Option!, condition: Condition): [Comment]
  commentsBySelf(userId: ID!, option: Option!, condition: Condition): [Comment]
  commentsByCourse(id: ID!, userId: ID!, option: Option!, condition: Condition): [Comment]
  nestedCommentsByComment( commentId: ID!,entityId: String!, category: String, option :Option!): [Comment]
 
  #detailCourse
  detailCourse(dirId: String): [Course]

  #mobilelog
  latestMobileLog(userId: String!,option :Option!): [MobileLog]

  #growth
  latestUserGrowth(userId: String!,option :Option!): [Growth]


  #training
  latestTraining(option :Option!): [Training]

  qiniu: Qiniu!
  #orderrecord
  latestRecord(authorId: String!,option :Option!): [OrderRecord]
  latestUserCourseRecord(authorId: String!, courseId: String!): result

  #manager
  queryManager(option :Option!): [Manager]

  #courseclassification
  queryCourseClassification(option :Option!): [CourseClassification]
  
  #权限demo
  voice: res
  movice: res

}